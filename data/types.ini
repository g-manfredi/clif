[format]

;type         = ENUM UINT8 UINT16 use dataset type?
organisation = ENUM PLANAR BAYER_2x2
order        = ENUM SINGLE RGGB BGGR GBRG GRBG RGB 

[camera_info]

pixel_pitch = DOUBLE

[lens_info]

focal_length = DOUBLE
focus_distance = DOUBLE

;arbitrary names
;calibration images may be saved under calibration.data - same format as main dataset
[calibration.intrinsics.*]

; distortion model type
; CV8 - opencv style eight parameter distortion model
; LINES - 3D lines gridded projection - may be used to fit 
type = ENUM CV8 UCALIB

; offset in pixels
projection = DOUBLE
; focal length in pixel
projection_center = DOUBLE

opencv_distortion = DOUBLE

lines_sizes = INT
lines_offset = DOUBLE
lines_direction = DOUBLE

[calibration.extrinsics.*]
; the range of images from .data [start, end)
; exmaple with 101 images
; range = 0 101
range = INT
type = ENUM LINE CIRCLE

;means = DESIGN
means = ENUM DESIGN

; two coordinate systems: world, virtual plenoptic camera 
; 6 coordinates, three rotation (axis–angle representation), three translation
; for simplicity the rotation vector is scaled by pi/2 e.g (0 0 1) is a 90° rotation around z axis
; normally world is specified with x,y as floor and z as heigth
; camera with x, y parallel to imaging plane, and positive z into the world
; example: plenoptic camera 500 mm from world origin along y axis (in world coordinates) respectively along z axis (in camera coordinate system)
; world_to_camera = -1 0 0   0 0 -500
world_to_camera = DOUBLE

; the start of the line
;camera_to_line_start = 0 0 0  50 0 0
camera_to_line_start = DOUBLE
; line_step = -1 0 0
line_step = DOUBLE
step_angle = DOUBLE
focus_point = DOUBLE

; calibration.images.data contains calibration images
[calibration.imgs.*]

range = INT
type = ENUM CHECKERBOARD HDMARKER

;size of 2d grid (checkerboard/markers)
size = INT
; real world marker size in mm
marker_size = DOUBLE

hdmarker_recursion = INT
bbox = INT

;flat target calibration points:
;pointdata = FLOATs the detected points - array of floats img.x, img.y, world.x, world.y
;pointcounts = INTs describes the vector of vectors in pointdata for each image the number of points found




