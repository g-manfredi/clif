#ifndef _CLIF_ENUMTYPES_H
#define _CLIF_ENUMTYPES_H

#include <unordered_map>
#include <typeindex>
#include <string.h>
#include <cstdint>
#include <vector>

#include <opencv2/core/core.hpp>

#include <H5Cpp.h>

namespace clif {
/*
 * \cond invalid type for BaseType lookup
 */
struct InvalidBaseType {};
/*
 * \endcond
 */
  
//base type for elements
enum class BaseType : int {
  INVALID = 0,
  UINT8   = 1,
  UINT16  = 2,
  INT     = 3,
  UINT32  = 4,
  FLOAT   = 5,
  DOUBLE  = 6,
  CV_POINT2F = 7,
//FIXME string is just a (free/malloc) pointer? how to handle delete/create?
  STRING  = 8,
//now for complex types - flags in addition to regular type!
  VECTOR  = 16
  };
//WARNING: change BaseTypeAtomicMask in enumtypes.cpp if enum value changes
extern BaseType BaseTypeMaxAtomicType;

//constexpr not working in MSVC2013 - reimplement at a later point
inline BaseType operator|(BaseType a, BaseType b)
{
  return (BaseType)((int)a | (int)b);
}

inline BaseType operator&(BaseType a, BaseType b)
{
  return (BaseType)((int)a & (int)b);
}


inline BaseType operator~(BaseType a)
{
  return BaseType(~int(a));
}

template<class FROM> struct _is_convertible_to_float : public std::is_convertible<FROM,float> {};

std::type_index BaseType2typeid(const BaseType &type);

#define CLIFALLATOMIC_T_B(CODE) \
CODE(char, BaseType::STRING) \
CODE(uint8_t, BaseType::UINT8) \
CODE(uint16_t, BaseType::UINT16) \
CODE(int, BaseType::INT) \
CODE(uint32_t, BaseType::UINT32) \
CODE(float, BaseType::FLOAT) \
CODE(double, BaseType::DOUBLE) \
CODE(cv::Point2f, BaseType::CV_POINT2F)

//sadly this does not due to missing constexpr with MSVC2013
//#define VECCODE(T, B) CODE(std::vector<T>, B | BaseType::VECTOR)
#define VECCODE(T, B) CODE(std::vector<T>, BaseType(int(B) | int(BaseType::VECTOR)))
#define CLIFALLVECTOR_T_B(CODE) CLIFALLATOMIC_T_B(VECCODE)

#define CLIFALL_T_B(CODE) CLIFALLATOMIC_T_B(CODE) CLIFALLVECTOR_T_B(CODE)

#define CODE(TYPE ,BASE) {std::type_index(typeid(TYPE)) COMMA (BASE)} COMMA
#define COMMA ,

static std::unordered_map<std::type_index, BaseType> BaseTypeMap = {
  CLIFALL_T_B(CODE)
};
#undef COMMA
#undef CODE
  
template<typename T> BaseType toBaseType()
{
  if (BaseTypeMap.count(std::type_index(typeid(T))))
    return BaseTypeMap[std::type_index(typeid(T))];
  else
  return BaseType::INVALID;
}

//disable warnungs about bitwise enum combinations not being in enum
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wswitch"

template<typename DUMMY, template<typename> class CHECK, typename T, template<typename> class F, typename ... ARGS> class _doCallCheck
{
public:
  void operator()(DUMMY d, ARGS ... args)
  {
    printf("ERROR: template functor was disabled for type!\n");
    abort();
  }
};

#define CODE(TYPE, BASE) template<template<typename> class CHECK COMMA  template<typename> class F COMMA  typename ... ARGS> class _doCallCheck<typename std::enable_if<CHECK<TYPE>::value COMMA int>::type COMMA CHECK COMMA TYPE COMMA F COMMA ARGS...> \
{ \
public: \
  void operator()(int d COMMA ARGS ... args) \
  { \
    F<TYPE>()(args...); \
  } \
};

//for all types
#define COMMA ,
CLIFALL_T_B(CODE)
#undef COMMA
#undef CODE


template<typename R, template<typename> class CHECK, typename T,  template<typename> class F,  typename ... ARGS>
R callF_R(typename std::enable_if<CHECK<T>::value, int>::type, ARGS...args)
{
  return F<T>()(args...);
}

template<typename R, template<typename> class CHECK, typename T,  template<typename> class F,  typename ... ARGS>
R callF_R(typename std::enable_if<!CHECK<T>::value, int>::type, ARGS...args)
{
  abort();
}

//callbybasetype - reguler
//deep dark black c++ magic :-D
#define CODE(TYPE, BASE) case (BASE) : _doCallCheck<int,CHECK,TYPE,F,ArgTypes...>()(0, args...); break;
#define COMMA ,
template<template<typename> class F, template<typename> class CHECK, typename ... ArgTypes> void callIf(BaseType type, ArgTypes ... args)
{
  switch (type) {
    CLIFALL_T_B(CODE)
    default:
      abort();
  }
}
#undef COMMA
#undef CODE

//callbybasetype - reguler
//deep dark black c++ magic :-D
#define CODE(TYPE, BASE) case (BASE) : return callF_R<R,CHECK,TYPE,F,ArgTypes...>(0, args...); break;
#define COMMA ,
template<typename R, template<typename> class F, template<typename> class CHECK, typename ... ArgTypes> R callIf(BaseType type, ArgTypes ... args)
{
  switch (type) {
    CLIFALL_T_B(CODE)
    default:
      abort();
  }
}
#undef COMMA
#undef CODE

//callbybasetype - reguler
//deep dark black c++ magic :-D
#define CODE(TYPE, BASE) case (BASE) : F<TYPE>()(args...); break;
#define COMMA ,
template<template<typename> class F, typename ... ArgTypes> void callByBaseType(BaseType type, ArgTypes ... args)
{
  switch (type) {
    CLIFALL_T_B(CODE)
    default:
      abort();
  }
}
#undef COMMA
#undef CODE

//callbybasetype - with extra type
//deep dark black c++ magic :-D
#define CODE(TYPE, BASE) case (BASE) :  F<ExtraType COMMA TYPE>()(args...); break;
#define COMMA ,
template<typename ExtraType, template<typename,typename> class F, typename ... ArgTypes> void callByBaseType(BaseType type, ArgTypes ... args)
{
  switch (type) {
    CLIFALL_T_B(CODE)
    default:
      abort();
  }
}
#undef COMMA
#undef CODE

//callbybasetype - reguler with exclude
//deep dark black c++ magic :-D
#define CODE(TYPE, BASE) case (BASE) : F<TYPE>()(args...); break;
#define COMMA ,
template<template<typename> class F, int EX, typename ... ArgTypes> void callByBaseTypeExcluding(BaseType type, ArgTypes ... args)
{
  switch (type) {
    CLIFALL_T_B(CODE)
    default:
      abort();
  }
}
#undef COMMA
#undef CODE

//callbybasetype - return with exclude
//deep dark black c++ magic :-D
#define CODE(TYPE, BASE) case (BASE) : return F<TYPE>()(args...); break;
#define COMMA ,
template<template<typename> class F, typename R, int EX, typename ... ArgTypes> R callByBaseTypeExcludingR(BaseType type, ArgTypes ... args)
{
  switch (type) {
    CLIFALL_T_B(CODE)
    default:
      abort();
  }
}
#undef COMMA
#undef CODE

//callbybasetype - regular with return
#define CODE(TYPE, BASE) case (BASE) : return F<TYPE>()(args...); break;
#define COMMA ,
template<template<typename> class F, typename R, typename ... ArgTypes> R callByBaseType(BaseType type, ArgTypes ... args)
{
  switch (type) {
    CLIFALL_T_B(CODE)
    default:
      abort();
  }
}
#undef COMMA
#undef CODE

//callbybasetype - regular with extra type
#define CODE(TYPE, BASE) case (BASE) : return F<ExtraType COMMA TYPE>()(args...); break;
#define COMMA ,
template<typename ExtraType, template<typename,typename> class F, typename R, typename ... ArgTypes> R callByBaseType(BaseType type, ArgTypes ... args)
{
  switch (type) {
    CLIFALL_T_B(CODE)
    default:
      abort();
  }
}
#undef COMMA
#undef CODE

#pragma GCC diagnostic pop

BaseType toAtomicBaseType(const BaseType &type);

  //enum class DataType : int {${DataTypeEnums}};
  enum class DataOrg : int {${DataOrgEnums}};
  enum class DataOrder : int {${DataOrderEnums}};
  enum class ExtrType : int {${ExtrTypeEnums}};
  enum class CalibPattern : int {${CalibPatternEnums}};
  enum class DistModel : int {${DistModelEnums}};
  
  const static char *BaseTypeStr[] = {"INVALID","UINT8","UINT16","INT","FLOAT","DOUBLE","STRING",NULL};
  const static char *DataOrgStr[] = {${DataOrgStrs}};
  const static char *DataOrderStr[] = {${DataOrderStrs}};
  const static char *ExtrTypeStr[] = {${ExtrTypeStrs}};
  const static char *CalibPatternStr[] = {${CalibPatternStrs}};
  const static char *DistModelStr[] = {${DistModelStrs}};
  
  static std::unordered_map<std::type_index, const char **> enum_mappings = { 
    {std::type_index(typeid(BaseType)), BaseTypeStr},
    {std::type_index(typeid(DataOrg)), DataOrgStr},
    {std::type_index(typeid(DataOrder)), DataOrderStr},
    {std::type_index(typeid(ExtrType)), ExtrTypeStr},
    {std::type_index(typeid(CalibPattern)), CalibPatternStr},
    {std::type_index(typeid(DistModel)), DistModelStr}
  };
  
  template<typename T> const char *enum_to_string(T val)
  {
    const char **strs = enum_mappings[std::type_index(typeid(T))];
    
    return strs[int(val)];
  }
  
  template<typename T> T string_to_enum(const char *str)
  {
    const char **strs = enum_mappings[std::type_index(typeid(T))];
        
    if (!strs)
      throw std::invalid_argument("unknown Enum Type for template!");
      
    for(int i=0;strs[i];i++)
      if (!strcmp(strs[i], str)) {
        return T(i);
        }

    return T(-1);
  }
  
BaseType CvDepth2BaseType(int cv_type);
int BaseType2CvDepth(BaseType t);

//FIXME strings!
int baseType_size(BaseType type);
template <typename T> int baseType_size()
{
  return sizeof(T);
}

template<typename T> class basetype_create_class_instances {
public:
  void operator()(void *ptr, off_t count)
  {
    for (int i=0;i<count;i++)
      new(((T*)ptr)+i) T;
  }
};

template <typename T> void *BaseType_new(off_t count)
{
  void *ptr = malloc(count*baseType_size<T>());
  assert(ptr);
  
  basetype_create_class_instances<T>()(ptr, count);
  
  return ptr;
}

template<typename T> class basetype_destruction_dispatcher {
public:
  void operator()(void *ptr, off_t count)
  {
    for (int i=0;i<count;i++)
      ((T*)ptr)[i].~T();
  }
};

struct BaseType_deleter
{
  BaseType_deleter(off_t count, BaseType type = BaseType::INVALID) : _count(count), _type(type) {};
  
  void operator()(void* ptr)
  {
    if (_type > BaseTypeMaxAtomicType)
      callByBaseType<basetype_destruction_dispatcher>(_type, ptr, _count);
    
    free(ptr);
  }
  
  off_t _count;
  BaseType _type;
};

template <typename T> struct BaseType_deleter_template
{
  BaseType_deleter_template(off_t count) : _count(count) {};
  
  void operator()(void* ptr)
  {
    basetype_destruction_dispatcher<T>()(ptr, _count);
    
    free(ptr);
  }
  
  off_t _count;
};

H5::DataType toH5DataType(BaseType type);
H5::DataType toH5NativeDataType(BaseType type);

BaseType toBaseType(hid_t type);

double BaseType_max(BaseType type);

//for int types!
template<typename T> double BaseType_max()
{
  return double(std::numeric_limits<T>::max())+1.0;
}

int order2cv_conf_flag(DataOrder order);

//H5::DataType BaseType_to_PredType(BaseType type);
}



#define ClifEnumString(Type,Var) Type ## Str[ static_cast<int>(Var) ]

#endif
